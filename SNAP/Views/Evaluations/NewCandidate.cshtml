@model SNAP.Models.Persistent.Candidate

@{
    ViewBag.Title = "New Candidate";
    ViewBag.Heading = null;
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm("NewCandidate", "Evaluations", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>@ViewBag.Heading</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Number, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Number, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Number, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ManagersEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ManagersEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ManagersEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />

        <div class="form-group">
            @Html.Label("Resume", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <label class="btn btn-default btn-sm" for="file-selector">
                    <input name="file" type="file" id="file-selector" style="display:none;" onchange="$('#resume-file-path').html($(this).val());">Browse
                </label>
                @Html.ValidationMessageFor(model => model.ResumeFilePath, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <span class="label label-success" id="resume-file-path"></span>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-6 col-md-offset-2">
                <p>Use <strong>Candidate Notes</strong> for any general information specific to the candidate.</p>
                <p>Use <strong>Interview Notes</strong> below to add any information specific for an interview.</p>
            </div>
        </div>

        <hr />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.ValidationMessage("InterviewersEmail", "", new { @class = "text-danger" })
            </div>
        </div>

        @for (var i = 0; i < Model.Interviews.Count(); i++)
        {
            string hidden = null;

            if (i > 2 && String.IsNullOrWhiteSpace(Model.Interviews[i].InterviewersEmail))
            {
                hidden = "hidden";
            }

            <div class="@hidden">
                <div class="form-group">
                    @Html.Label(String.Format("Interviewer's Email ({0})", i + 1), htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => Model.Interviews[i].InterviewersEmail, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>

                <div class="form-group">
                    @Html.Label("Interview Notes", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => Model.Interviews[i].Notes, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>

                <hr />
            </div>
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <div class="btn btn-default btn-sm show-next-hidden">Add Interviewer</div>
            </div>
        </div>

        <br />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Submit" class="btn btn-primary overlay-click" />
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/snap-emailaddress")
}