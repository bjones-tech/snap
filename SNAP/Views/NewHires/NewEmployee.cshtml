@model SNAP.Models.Persistent.NewHire
@using SNAP.Models.Helpers

@{
    ViewBag.Title = Model.HireType;
    ViewBag.Heading = null;
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm("NewEmployee", "NewHires", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.EmailAddress)
    @Html.HiddenFor(model => model.ServiceDate)
    @Html.HiddenFor(model => model.IsConversion)
    @Html.HiddenFor(model => model.IsContingent)

    <div class="form-horizontal">
        <h4>@ViewBag.Heading</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.ValidationMessage("MailNotice", "", new { @class = "text-danger" })
        @Html.ValidationMessage("Request", "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                @Html.HiddenFor(model => model.FirstName)
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                @Html.HiddenFor(model => model.LastName)
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.WorkerID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.WorkerID, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                @Html.HiddenFor(model => model.WorkerID)
                @Html.ValidationMessageFor(model => model.WorkerID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.WorkerType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.WorkerType, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                @Html.HiddenFor(model => model.WorkerType)
                @Html.ValidationMessageFor(model => model.WorkerType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HireType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.HireType, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                @Html.HiddenFor(model => model.HireType)
                @Html.ValidationMessageFor(model => model.HireType, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="input-group">
                    @DatePicker.Label("StartDate")
                    @Html.TextBoxFor(model => model.StartDate, "{0:MMMM dd, yyyy}", new { @class = "form-control start-date-picker" })
                </div>
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Model.IsConversion == false)
        {
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <label class="checkbox">
                        @Html.CheckBoxFor(model => model.Rehire, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.DisplayNameFor(model => model.Rehire)
                    </label>
                </div>
            </div>
        }

        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Department, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Department, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Department, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ManagersEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ManagersEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ManagersEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Country, new SelectList(ViewBag.Countries, Model.Country), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Office, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Office, new SelectList(ViewBag.Offices, Model.Office), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Office, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Model.IsConversion == false && Model.IsContingent == false)
        {
            <hr />

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <label class="checkbox">
                        @Html.CheckBoxFor(model => model.ComputerRequired, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.DisplayNameFor(model => model.ComputerRequired)
                    </label>
                    <label class="checkbox">
                        @Html.CheckBoxFor(model => model.PhoneRequired, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.DisplayNameFor(model => model.PhoneRequired)
                    </label>
                </div>
            </div>
        }

        @if (Model.IsContingent == true)
        {
            <hr />

            <div class="form-group">
                @Html.LabelFor(model => model.O365License, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.O365License, new SelectList(ViewBag.O365Profiles, "Value", "Key", Model.O365License), new { @class = "form-control inline-element" })
                    <span class="glyphicon glyphicon-info-sign" data-toggle="tooltip" data-html="true" data-placement="right" title="@ViewBag.O365ProfileDetails"></span><br />
                    @Html.ValidationMessageFor(model => model.O365License, "", new { @class = "text-danger" })
                </div>
            </div>

            @Html.HiddenFor(model => model.ComputerRequired)

            <div class="form-group">
                @Html.LabelFor(model => model.PhoneRequired, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <label class="checkbox">
                        @Html.CheckBoxFor(model => model.PhoneRequired, new { htmlAttributes = new { @class = "form-control" } })
                    </label>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.OracleRequired, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <label class="checkbox">
                        @Html.CheckBoxFor(model => model.OracleRequired, new { htmlAttributes = new { @class = "form-control" } })
                    </label>
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.O365License)
            @Html.HiddenFor(model => model.OracleRequired)
        }

        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.PublicNotes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PublicNotes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PublicNotes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PrivateNotes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PrivateNotes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PrivateNotes, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <label class="checkbox">
                    @Html.CheckBoxFor(model => model.Suppress, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.DisplayNameFor(model => model.Suppress)
                </label>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <label class="checkbox">
                    @Html.CheckBoxFor(model => model.ITaaS, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.DisplayNameFor(model => model.ITaaS)
                </label>
            </div>
        </div>

        <hr />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Submit" class="btn btn-primary overlay-click" />
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/snap-newhire")
    @Scripts.Render("~/bundles/snap-licenses")
    @Scripts.Render("~/bundles/snap-emailaddress")
}